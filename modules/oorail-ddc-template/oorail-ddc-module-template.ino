/*
 *    oorail-ddc-module-template
 *    version 1.0.2
 *    
 *    Copyright (c) 2020 IdeaPier LLC, All Rights Reserved
 * 
 */

/*
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 * 
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *   
 */

/*
 *    For more information about our projects visit:
 *    
 *      https://oorail.co.uk/tech/
 *      https://oorail.co.uk/digital-dc/
 *      
 *    You can find helpful videos on our YouTube channel:
 *   
 *      https://youtube.com/oorail
 *      
 */

/*
 *    This code provides a starting point template for new modules.
 *    It is also the place where we test new common features before porting
 *    those changes into existing modules.
 *    
 *    Currently this module provides:
 *    
 *      Basic useful output via serial port
 *      ESP32 Chip ID
 *      WiFi support
 *      MDNS support
 *      Async Web Server
 *      Standard API endpoints
 *      HTTP-OTA Updates
 *      Supports ESP32 (ESP8266 is in progress)
 *      ESP32 Multi-Core Support
 *      
 */

#define OORAIL_PROJECT "oorail-project"
#define OORAIL_VERSION "1.0.2"
#define OORAIL_COPYRIGHT "Copyright (c) 2020 IdeaPier LLC (oorail.co.uk)"
#define OORAIL_LICENSE "GPLv3"

/*
 * The OORAIL_FW_BUILD defines the BUILD version for the firmware.
 * This is used for over the air (OTA) updating once the code is 
 * installed on an ESP32/ESP8266 module.
 * 
 * The syntax for this is YYYYMMDDBB where:
 * 
 *  YYYY is the year (eg. 2020)
 *  MM is the month (eg. 02 for February)
 *  DD is the day of the month (eg. 17)
 *  BB is the build of the day, which is a counter that is incremented
 *  
 * This will ultimately be auto-generated by controller
 * 
 */
#define OORAIL_FW_BUILD "2020021700"

#if !(defined(ESP32) || defined(ESP8266))
 #error "Unsupported hardware platform - please use ESP32 or ESP8266"
#endif

/*
 * Platform identifier, platform specific features, pin definitions
 */

#if defined(ESP32)
#define OORAIL_PLATFORM "ESP32"
#define OORAIL_SERIAL_BAUD 115200
#define OORAIL_FEATURE_ASYNC_WEB 1
#define OORAIL_OTA_UPDATE 1
#endif

#if defined(ESP8266)
#define OORAIL_PLATFORM "ESP8266"
#define OORAIL_SERIAL_BAUD 115200
#endif

#include <strings.h>
#if defined(ESP32)
 #include <WiFi.h>
 #include <WiFiClient.h>
 #include <ESPmDNS.h>
//#error "ESP32 support is disabled for this module"
#else 
 #include <ESP8266WiFi.h>
//#error "ESP8266 support is disabled for this module"
#endif

#if defined(OORAIL_FEATURE_ASYNC_WEB)
#include <ESPAsyncWebServer.h>
#endif

#if defined(OORAIL_OTA_UPDATE)
#if defined(ESP32)
#include <Arduino.h>
#include <HTTPClient.h>
#include <HTTPUpdate.h>
#endif
#endif

#define OORAIL_MDNS_HOSTNAME "oorail-template"

#if defined(OORAIL_FEATURE_ASYNC_WEB)
#define OORAIL_HTTP_PORT 80

AsyncWebServer server(OORAIL_HTTP_PORT);
#endif

/* Constants */
#if defined(OORAIL_OTA_UPDATE)
#if defined(ESP32)
const char* oorail_ota_url = "http://oorail-controller.local/ota/firmware/oorail-project/esp32/";
#endif
#endif

/* Global Variables */
#if defined(ESP32)
uint64_t chipid;
#endif

#if defined(OORAIL_OTA_UPDATE)
WiFiClient ota_client;
#endif


/* WiFi credentials */
const char* ssid = "REPLACE-ME-WITH-YOUR-WIFI-SSID";
const char* password = "REPLACE-ME-WITH-YOUR-WIFI-PASSWORD";

void setup() {
  Serial.begin (OORAIL_SERIAL_BAUD);
  oorail_banner();
  oorail_wifi();
#if defined(OORAIL_FEATURE_ASYNC_WEB)
  oorail_web_init();
#endif
}

#if defined(OORAIL_FEATURE_ASYNC_WEB)
void oorail_web_init_endpoints() {
/*
 * server.on("/endpoint/path/", HTTP_METHOD, function); 
 */
  return;
}
#endif

void loop() {

}

#if defined(OORAIL_FEATURE_ASYNC_WEB)
void oorail_web_init() {

/*
 * These are standard endpoints for all our modules.
 * 
 * /       - web root provides basic info
 * /debug  - provides advanced debugging information
 * /hc     - health check on module
 * /info   - provides module information
 * /ping   - basic ping check for testing if the API is up
 * /status - provides advanced status information on the module
 * 
 * /ota/update - Check for updates and perform OTA update
 */
  
  server.on("/", HTTP_GET, oorail_web_root);
  server.on("/debug", HTTP_GET, oorail_web_debug);
  server.on("/hc", HTTP_GET, oorail_web_hc);
  server.on("/info", HTTP_GET, oorail_web_info);
  server.on("/ping", HTTP_GET, oorail_web_ping);
  server.on("/status", HTTP_GET, oorail_web_status);
#if defined(OORAIL_OTA_UPDATE)
  server.on("/ota/update", HTTP_GET, oorail_web_ota_update);
#endif

  oorail_web_init_endpoints();

  server.onNotFound(oorail_web_notFound);
  server.begin();  
}

void oorail_web_notFound(AsyncWebServerRequest *request) {
  request->send(404, "text/plain", "Not found\r\n");
}

void oorail_web_root(AsyncWebServerRequest *request) {
  char message[32];
  String web_message;

  sprintf(message,"Hello from Core %d\r\n", xPortGetCoreID());
  web_message = message;
    
  request->send(200, "text/plain", web_message);
}

void oorail_web_debug(AsyncWebServerRequest *request) {
  char response[64];

  /*
   * Modify this to include specific debug information for the module
   */
  sprintf(response,"\r\nModule Debug Information: \r\n");
  request->send(200, "text/plain", response);
}

void oorail_web_hc(AsyncWebServerRequest *request) {
  /*
   * Modify this to run module specific checks and return a result code
   * 
   * This should return 200 OK if things are OK
   * This should return a custom 5xx error if things are NOT OK
   * 
   * This is used by the controller, so make sure your controller health check code
   * for this module matches what you put below.
   * 
   */
  request->send(200, "text/plain", "I am OK\r\n");
}

void oorail_web_info(AsyncWebServerRequest *request) {
  char response[1024];
#if defined(ESP32)
  IPAddress oorail_ip = WiFi.localIP();
  IPAddress oorail_subnet = WiFi.subnetMask();
  IPAddress oorail_gw = WiFi.gatewayIP();

  sprintf(response,"\r\n%s, version %s [%s-%04X%08X] (Build: %s)\r\n\r\nLicensed under %s\r\n\r\nModule IP: %d.%d.%d.%d (%d.%d.%d.%d)\r\nModule GW: %d.%d.%d.%d\r\n\r\n",
    OORAIL_PROJECT, OORAIL_VERSION, OORAIL_PLATFORM, (uint16_t)(chipid>>32), (uint32_t)chipid, OORAIL_FW_BUILD, OORAIL_LICENSE,
    oorail_ip[0], oorail_ip[1], oorail_ip[2], oorail_ip[3], oorail_subnet[0], oorail_subnet[1], oorail_subnet[2], oorail_subnet[3],
    oorail_gw[0], oorail_gw[1], oorail_gw[2], oorail_gw[3]);
#else
  sprintf(response,"\r\n%s, version %s [%s] (Build: %s)\r\n\r\nLicensed under %s\r\n\r\n", 
    OORAIL_PROJECT, OORAIL_VERSION, OORAIL_PLATFORM, OORAIL_FW_BUILD, OORAIL_LICENSE);
#endif
  request->send(200, "text/plain", response);
}

void oorail_web_ping(AsyncWebServerRequest *request) {
  request->send(200, "text/plain", "OK\r\n");
}

void oorail_web_status(AsyncWebServerRequest *request) {
  char response[1024];
  /*
   * This end point should dump everything displayed in /info
   * It should also provide additional information on the current state
   * 
   */
#if defined(ESP32)
  IPAddress oorail_ip = WiFi.localIP();
  IPAddress oorail_subnet = WiFi.subnetMask();
  IPAddress oorail_gw = WiFi.gatewayIP();

  sprintf(response,"\r\n%s, version %s [%s-%04X%08X] (Build: %s)\r\n\r\nLicensed under %s\r\n\r\nModule IP: %d.%d.%d.%d (%d.%d.%d.%d)\r\nModule GW: %d.%d.%d.%d\r\n\r\n",
    OORAIL_PROJECT, OORAIL_VERSION, OORAIL_PLATFORM, (uint16_t)(chipid>>32), (uint32_t)chipid, OORAIL_FW_BUILD, OORAIL_LICENSE,
    oorail_ip[0], oorail_ip[1], oorail_ip[2], oorail_ip[3], oorail_subnet[0], oorail_subnet[1], oorail_subnet[2], oorail_subnet[3],
    oorail_gw[0], oorail_gw[1], oorail_gw[2], oorail_gw[3]);
#else
  sprintf(response,"\r\n%s, version %s [%s] (Build: %s)\r\n\r\nLicensed under %s\r\n\r\n", 
    OORAIL_PROJECT, OORAIL_VERSION, OORAIL_PLATFORM, OORAIL_FW_BUILD, OORAIL_LICENSE);
#endif
  request->send(200, "text/plain", response);
}

#if defined(OORAIL_OTA_UPDATE)
void oorail_web_ota_update(AsyncWebServerRequest *request) {
  HTTPClient httpClient;
  int httpCode = 0;
  String firmwareURL = String(oorail_ota_url);

  firmwareURL.concat("latest.bin");
  httpClient.begin( ota_client, firmwareURL );
  httpCode = httpClient.GET();

  if (httpCode == 200) {
    request->send(200, "text/plain", "\r\nOTA Check for Update has been queued\r\n");
  } else {
    request->send(200, "text/plain", "\r\nOTA URL Not Found\r\n");
  }
}
#endif
#endif

void oorail_wifi() {
#if defined(ESP32)
  Serial.print(" * Setting up WiFi on core ");
  Serial.println(xPortGetCoreID());
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  Serial.print(" * Connecting to WiFi [");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".*");
  }

  Serial.println("]");
  Serial.println("");
  Serial.print(" * Connected to ");
  Serial.println(ssid);
  Serial.print(" * IP address  : ");
  Serial.println(WiFi.localIP());
  Serial.print(" * Subnet Mask : ");
  Serial.println(WiFi.subnetMask());
  Serial.print(" * Gateway IP  : ");
  Serial.println(WiFi.gatewayIP());
  
  if (MDNS.begin(OORAIL_MDNS_HOSTNAME)) {
    Serial.printf("\r\n * MDNS registered as %s.local\r\n", OORAIL_MDNS_HOSTNAME);
    Serial.printf(" * MDNS responder started\r\n");
  }
#endif
}
 
void oorail_banner() {
#if defined(ESP32)
  chipid = ESP.getEfuseMac();
#endif

  Serial.printf("\r\n\r\n%s, version %s [%s] (Build: %s)\r\n", OORAIL_PROJECT, OORAIL_VERSION, OORAIL_PLATFORM, OORAIL_FW_BUILD);
  Serial.printf("%s\r\n", OORAIL_COPYRIGHT);
  Serial.printf("For additional information visit: \r\n https://oorail.co.uk/tech/ \r\n\r\n");
  Serial.printf("License: %s\r\n\r\n", OORAIL_LICENSE);

#if defined(ESP32)
  Serial.printf(" * ESP32 Device ID: %04X",(uint16_t)(chipid>>32));
  Serial.printf("%08X\r\n",(uint32_t)chipid);
  Serial.print(" * ESP32 is using processor core ");
  Serial.println(xPortGetCoreID());
#endif
#if defined(OORAIL_OTA_UPDATE)
  Serial.printf(" * OTA Update URL is %s\r\n\r\n ", oorail_ota_url);
#endif
}
